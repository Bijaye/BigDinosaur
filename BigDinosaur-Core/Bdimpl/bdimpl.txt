System Design and Memory Limits and bits manipulation,scalability
Linked Lists
Breadth First Search
Bit Manipulation
Binary Trees
Depth First Search
Singleton Design Pattern
Tries
Binary Search
Factory Design Pattern
Stacks
Merge Sort
Memory (Stack vs Heap)
Queues
Quick Sort
Recursion
Vectors / ArrayLists
Tree Insert / Find / etc
Big-O Time
Consider testing for:
»»Extreme cases: 0, negative, null, maximums, etc
»»User error: What happens if the user passes in null or a negative value?
»»General cases: Test the normal case.

What are the space and time complexities?
»»What happens if there is a lot of data?
»»Does your design cause other issues? (i.e., if you’re creating a modified version of a binary search tree, did your design impact the time for insert / find / delete?)

»»If they gave you specific data (e.g., mentioned that the data is ages, or in sorted order), have you leveraged that information? There’s probably a reason that you’re given it.

APPROACH I: EXAMPLIFY
Description: Write out specific examples of the problem, and see if you can figure out a general rule.

APPROACH II: PATTERN MATCHING
Description: Consider what problems the algorithm is similar to, and figure out if you can modify the solution to develop an algorithm for this problem

APPROACH IV: BASE CASE AND BUILD
Description: Solve the algorithm first for a base case (e.g., just one element). Then, try to solve it for elements one and two, assuming that you have the answer for element one. Then, try to solve it for elements one, two and three, assuming that you have the answer to elements one and two.

Data Structure Brainstorm:
Linked list
Array?
Binary tree
Heap?

Creating a Linked List
Deleting a Node from a Singly Linked List
Implementing a Stack
Implementing a Queue
Binary Treestraversal
Graph Traversal

Bubble Sort:
Selection Sort:
Merge Sort:
Quick Sort:
Bucket Sort:


System Design and Memory Limits

Example: Design a Web Crawler

Big vs Little Endian

Stack (Memory

Heap (Memory)
Malloc





 less than 50K, stores one table per file, including index
  unparallelled parallel database experience
  Concurrency
  Replication Clusters
  In-Memory Database
  On-Disk & In-Memory Support
  Distributed Capabilities
  master .slave replication 
  async master slave
  online backup
  record and file level locking 
  Concurrency control via task locks, file locks & shareable/exclusive record locks
  primary key indexing 
  secondary key indexing 
  Hot Backup
  Transaction locking 
  real time backup
  table &/or row locking
  In-memory and persistent mode
  data streams
  Index types: BTree, single, path, collection Misc
  what does it mean by index type
  objects between nodes without impact to application code