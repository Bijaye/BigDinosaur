Every file has uri and path 
Every file is defined buffersize ,no of replication,block size ,iscreateparent(it can be true and false )
There can be default server configuration for 
 //default server configuration 
 private long blockSize;
 private int writePacketSize;
 private short replication;
 private int fileBufferSize;
 private boolean encryptDataTransfer;
 
 same file can e located on different blocks locations 
 for the same path there can be array of blocklocations
  BlockLocation[] locs and therefor can have more than one 
  status FileStatus[]
  
   final FileSystem[] children = getChildFileSystems(); 
  
  /**
   * Get all the immediate child FileSystems embedded in this FileSystem.
   * It does not recurse and get grand children.  If a FileSystem
   * has multiple child FileSystems, then it should return a unique list
   * of those FileSystems.  Default is to return null to signify no children.
   * 
   * @return FileSystems used by this FileSystem
   */
   
   Generate stream after creating file system .
   that stream will be used on that file system i.o
   
     public static FSDataOutputStream create(FileSystem fs,
      Path file, FsPermission permission) throws IOException {
    // create the file with default permission
    FSDataOutputStream out = fs.create(file);
    // set its permission to the supplied one
    fs.setPermission(file, permission);
    return out;
  }
  
  
  
  a.txt 
  it has acl defined ,it has path ,it has no of block locations ,e.g that might be in one host 
  another host ,it has defined buffer ,it has file lenght 
  
  
    /user          -> hdfs://nnContainingUserDir/user
  /project/foo   -> hdfs://nnProject1/projects/foo
  /project/bar   -> hdfs://nnProject2/projects/bar
  /tmp           -> hdfs://nnTmp/privateTmpForUserXXX
 
  
  Below creates block object with name block location 
  
  suppose there is 
  test.txt text file 
  it  exists in following network topology 
  
  Block location :
  There are 3 hosts 
  localhost:8080
  localhost:8081
  localhost:8082
  
  topology 
  hadoop11        /rack01
hadoop12        /rack01
hadoop13        /rack01
hadoop14        /rack01
haddop15        /rack01
hadoop21        /rack02
hadoop22        /rack02
hadoop23        /rack02
hadoop24        /rack02
hadoop25        /rack02
hadoop31        /rack03
hadoop32        /rack03
hadoop33        /rack03
hadoop34        /rack03
hadoop35        /rack03
10.0.1.111      /rack01
10.0.1.112      /rack01
10.0.1.113      /rack01
10.0.1.114      /rack01
10.0.1.115      /rack01
10.0.1.121      /rack02
10.0.1.122      /rack02
10.0.1.123      /rack02
10.0.1.124      /rack02
10.0.1.125      /rack02
10.0.1.131      /rack03
10.0.1.132      /rack03
10.0.1.133      /rack03
10.0.1.134      /rack03
10.0.1.135      /rack03

offset=0
lenght of file=30

block has data of equal size 

block has offset ,from where copy should starts 



   static protected int blockSize = 512;
  static protected int numBlocks = 10;
  
   byte[] buf = new byte[blockSize];
    int bytesRead = fstr.read(buf, 0, blockSize)
    
  
  -------------------------Mounting -----------------
  
  mount point is a directory to access your data (files and folders) which is stored in your disks
  // Starts from root directory 
  // Create file with a 2 component dirs
  
   // Create file with a 3 component dirs
   //  local fs use 1 block
    // override for HDFS
    
    
    view fs has different mounts 
    from the prospective of user it is single or multiple mount but this mount also 
    points to another real file path interesting?
    e.g mnt/pd0
    mnt/pd01
    mnt/pd02
    set a viewFileSystems with 3 mount points as 
  mnt/pd0 -pointing to same in  target fs
    mnt/pd01-pointing to same in  target fs
    mnt/pd02-pointing to same in  target fs
  
  
  